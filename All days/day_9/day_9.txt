package com.training.org;

public class Address {
	private String city;
	private String state;
	private String laneNo;
	private String houseNo;
	
	public Address() {
		System.out.println("Default constructor of Address is called");
		city="";
		state="";
		laneNo="";
		houseNo="";
	}

	public Address(String city, String state, String laneNo, String houseNo) {
		System.out.println("Parameterised constructor of Address is called");
		this.city = city;
		this.state = state;
		this.laneNo = laneNo;
		this.houseNo = houseNo;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getLaneNo() {
		return laneNo;
	}

	public void setLaneNo(String laneNo) {
		this.laneNo = laneNo;
	}

	public String getHouseNo() {
		return houseNo;
	}

	public void setHouseNo(String houseNo) {
		this.houseNo = houseNo;
	}

	@Override
	public String toString() {
		return "Address [city=" + city + ", state=" + state + ", laneNo=" + laneNo + ", houseNo=" + houseNo + "]";
	}
	
	
	
	

}







package com.training.org;

public class Employee {
	
	private Integer empId;
	private String name;
	private double salary;
	private Address address;  //containment
	
	public Employee() {
		System.out.println("Default constructor of Employee is called");
		empId=0;
		name="";
		salary=0;
		address=new Address();
		
	}

	public Employee(Integer empId, String name, double salary,Address address) {
		System.out.println("Parameterised constructor of Employee is called");
		this.empId = empId;
		this.name = name;
		this.salary = salary;
		this.address=address;
	}

	public Integer getEmpId() {
		return empId;
	}

	public void setEmpId(Integer empId) {
		this.empId = empId;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", name=" + name + ", salary=" + salary + ", address=" + address + "]";
	}
}






package com.training.org;

import java.util.ArrayList;

public class MyWorld {
	public static void main(String[] args) {
		Employee e1=new Employee();
		System.out.println(e1);
		
		Employee e2=new Employee(101,"Eshan",10000,new Address("Pune","MH","504","304"));
		System.out.println(e2);
		
		
		ArrayList<Employee> eList=new ArrayList<Employee>();
		eList.add(new Employee(102,"Tannu",10000,new Address("Pune","MH","504","54")));
		eList.add(new Employee(103,"Chinku",200030,new Address("Hyd","AP","304","334")));
		eList.add(new Employee(104,"Pappu",43000,new Address("Chennai","TN","304","504")));
		eList.add(new Employee(105,"Channu",340000,new Address("Mumbai","MH","204","604")));
		eList.add(new Employee(106,"Mannu",340000,new Address("Pune","MH","404","504")));
		
		for (Employee employee : eList) {
			System.out.println(employee);
		}
		
	}

}






https://dzone.com/articles/java-heap-dump-analyzer-1
    
    


class Name{
	1] Member variables as private
  	2] Default constructor as public
	3] Parameterised constructor as public
	4] Setters as public
	5] getters as public
	
	6] Behaviours as public 
	

}






1] Camel case
   empId
   displayEmployeeDetails
   showSalesEmployeeDeatails

2] Pascal Case
   Employee
   WageEmployee
   

Hungerian Notation

int iVal1
float fNum1
int iaArr[]



CODE COMPLETE


    
    
    


https://thomlom.dev/setup-eslint-prettier-react/
    
    
    
    
    
    const path = require("path")

var config = {
  entry: "./main.js",

  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "index.js",
  },
  devServer: {
    inline: true,
    port: 3000,
  },

  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        loader: "babel-loader",

        query: {
          presets: ["es2015", "react"],
        },
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
      {
        test: /\.html$/,
        use: ["html-loader?config=otherHtmlLoaderConfig"],
      },
      {
        test: /\.ts$/,
        use: ["ts-loader"],
      },
    ],
  },
}
module.exports = config



https://thomlom.dev/setup-eslint-prettier-react/
    
    
    
    


"rules": {
    "no-console": "warn",
    "no-eval": "error",
    "import/first": "error"
  }
        
        
        
        
        
        


import React, { Component } from 'react';
import { render } from 'react-dom';




class App extends Component {
  constructor() {
    super();
    this.state = {
      appState: 1
    };
    this.increaseNumber = this.increaseNumber.bind(this);
    this.decreaseAppState = this.decreaseAppState.bind(this);
  }

  increaseNumber() {
    const { appState } = this.state;

    this.setState({
      appState: appState + 1
    });
  }

  decreaseAppState() {
    const { appState } = this.state;

    this.setState({
      appState: appState - 1
    });
  }

  render() {
    var temp="hello";
    const { appState } = this.state;

    return (
      <div className='app'>
        <h1>React assignment #1</h1>
        <p>Current number: {appState}</p>
        <button onClick={this.increaseNumber}>Increase number</button>
       
      </div>
    );
  }
}

export default App;







{
    "name": "linter-demo",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "start": "webpack-dev-server --hot",
        "lint": "eslint ./*.js"
    },
    "dependencies": {
        "react": "^16.13.1",
        "react-dom": "^16.13.1",
        "react-scripts": "3.4.3",
        "babel-cli": "^6.26.0",
        "babel-core": "^6.26.3",
        "babel-loader": "^7.1.5",
        "babel-preset-es2015": "^6.24.1",
        "babel-preset-react": "^6.24.1",
        "html-loader": "^0.5.5",
        "react-router": "^3.0.5",
        "react-router-dom": "^5.0.1",
        "webpack": "^4.16.1",
        "webpack-cli": "^3.1.0",
        "webpack-dev-server": "^3.1.4"
    },
    "devDependencies": {
        "babel-eslint": "^10.1.0",
        "babel-loader": "^8.1.0",
        "eslint": "^7.10.0",
        "eslint-loader": "^4.0.2",
        "eslint-plugin-react": "^7.21.3"
    }
}






var foo=1
console.log(foo)
var bar
bar=1
function test(



){
    console.log(baz)
}

var baz=1234






{
  "env": {
    "commonjs": true,
    "es6": true,
    "node": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "ecmaVersion": 2018
  },
  "rules": {
    "no-console": "error"
  }
}
